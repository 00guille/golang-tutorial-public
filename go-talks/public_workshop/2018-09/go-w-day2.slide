Golang workshop - Day 2

Septiembre 2018

Alejandro Perez Albiero
Eric Kohan
Federico Roasio

* WIFI

Red -> guest

Pass: Meli2017

* Presentación 

https://bit.ly/2p48ZTC

* Punteros

.play -edit ../../resources/src/06_pointers/main.go

* Jugando con punteros 1

.play -edit ../../resources/src/06_pointers/1/main.go

* Jugando con punteros 2

.play -edit ../../resources/src/06_pointers/2/main.go

* Jugando con punteros 3

.play -edit ../../resources/src/06_pointers/3/main.go

* Jugando con punteros 4

.play -edit ../../resources/src/06_pointers/4/main.go

* Jugando con punteros 5

.play -edit ../../resources/src/06_pointers/5/main.go

* Tipo de datos

.code ../../resources/src/07_types/main.go /START OMIT/,/END OMIT/

* Tipo de datos - continuación 

.play ../../resources/src/07_types/main.go /^func main/,/^}/

* Structs - inicialización

	type Vertex struct {
		X, Y int
	}

	var (
		v1 = Vertex{1, 2}  // has type Vertex
		v2 = Vertex{X: 1}  // Y:0 is implicit
		v3 = Vertex{}      // X:0 and Y:0
		p  = &Vertex{1, 2} // has type *Vertex
	)

* Structs 

	type tree struct {
		value       int
		left, right *tree
	}

	func add(t *tree, value int) *tree {
		if t == nil {
			// Equivalent to return &tree{value: value}.
			t = new(tree)
			t.value = value
			return t
		}
		if value < t.value {
			t.left = add(t.left, value)
		} else {
			t.right = add(t.right, value)
		}
		return t
	}

* Collections #1

Array Loop

.play ../../resources/src/09_collections/1/main.go


* Collections #2

Slices

	months := [...]string{1: "January", /* ... */, 12: "December"}
	Q2 := months[4:7]                                      summer := months[6:9]
	fmt.Println(Q2)     // ["April" "May" "June"]          fmt.Println(summer) // ["June" "July" "August"]”

.image ../../resources/slices.png _ _


* Collections #2

Slice Loop

.play ../../resources/src/09_collections/2/main.go

* Collections #3

Map Loop

.play ../../resources/src/09_collections/3/main.go

* 3º Ejercicio (struct, punteros, slices)

Hacer un programa que reciba por parametro una lista de enteros, los almacene en un slice, popule un arbol binario y despues imprima los valores en orden ascendente

* Funciones como valores

.play ../../resources/src/10_functions_as_values/main.go

* Creando tipos -> &, new y make 

_make_: función built-in que se usa únicamente para allocar e inicializar slices, maps o channels. Se pasa el tipo, el tamaño y la capacidad. Como resultado obtenemos la variable en si, no un puntero

	slice := make([]int, 0, 10)

_new_: función built-in que se usa para allocar memoria, retorna un puntero al valor allocado con zero value

	someVar := new(int)

_&_: al igual que el new se utiliza para allocar memoria y retorna un puntero pero ademas nos permite inicializar atributos en variables complejas: 

	type Dog struct {
		Name string
		Age  int
	}

	d := &Dog{Name: "Tom", Age: 14}


* Heap & Escape Analysis
- new  -> siempre va al heap
- make -> Escape Analysis

.image ../../resources/escape-analysis.jpg 450 _


* Heap & Escape Analysis
- Escape analysis es muy importante para escribir programas GO más performantes
- Todavía no hay una especificación de lenguaje
- Algunas de las decisiones de escape analysis del compilador son contraintuitivas, la mejor forma es prueba y error
- No hagas supocisiones, realiza escape analysis y tomá decisiones basadas en esa información

* Interfaces

.play ../../resources/src/11_interfaces/1/main.go

* Interfaces continuación

	type Flash struct {
		Alias string
		Age   int
	}

	func (s *Flash) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "speed")
	}

* Interfaces continuación

.play ../../resources/src/11_interfaces/2/main.go /^func main/,/^}/

* Composition

	type SuperHero interface {
		Powers()
	}

	type Superman struct {
		Alias string
		Age   int
	}

	func (s *Superman) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "invulnerability, heat vision, flight, speed")
	}

	type SuperBoy struct {
		Superman
	}

* Composition continuación

.play ../../resources/src/15_composition/1/main.go /^func main/,/^}/

* Composition continuación

	type SuperBoy struct {
	    Superman
	}

	func (s *SuperBoy) Powers() string {
	    return fmt.Sprintf("powers: %s", "flight")
	}
    
.play ../../resources/src/15_composition/2/main.go /^func main/,/^}/

* 4º Ejercicio

Modelar la funcionalidad para un sistema de cines que calcule los ingresos netos de una función en base a los asistentes y al precio base de la entrada. Existen tres tipos de asistentes y tienen las siguientes características:

- Normales: Pagan el 100%
- Jubilados: Tienen un 50% de descuento
- Invitados: No pagan nada

* Testing

Golang posee un built-in testing framework 

Esté es provisto mediante el package testing

Todo archivo Go con el suffix “_test.go” es considerado un test suite en Go

En cada test suite podemos correr:
	- Test
	- Benchmarks
	- Examples

* Testing continuación

Cada TestXxx function en una test suite es un test

Cada BenchmarkXxx function en una test suite es un benchmark

Cada ExampleXxx function es una test suite is an example

White box testing / Black box testing

El comando “go test” corre los test del proyecto

* Testing: Test

	//Basic Test
	func TestXXX(t *testing.T) {
		//t.Parallel()

		result, err := add(a, b)

		if err != nil {
			t.Fatal("We got some error", err)

			//Skip test
			//t.Skip("We got some error", err)
		}

		expected := 6

		if result != expected {
			t.Fatalf("%d + %d Should be equals to %d", a, b, expected)
		}
	}

* Testing: Benchmark

	//Basic Benchmark
	func BenchmarkXXX(bt *testing.B) {

		for i := 0; i < bt.N; i++ { add(a, b) }

		//Setting N limit
		bt.N = 1000

		//Reset timer
		//b.ResetTimer()

		for i := 0; i < bt.N; i++ { add(a, b) }

		//Parallel
		bt.RunParallel(
			func(pb *testing.PB) {
				for pb.Next() {
					add(a, b)
				}
			}
		)
		
	}

* Testing: Examples
	
	//Basic Example
	func ExampleXXX() {
		result, _ := add(a, b)

		fmt.Println(result)

		// Output: 6
	}


- [[https://golang.org/pkg/strings/#example_Contains][strings contains example]]

* Testing: Not native frameworks

- [[https://github.com/franela/goblin][Goblin]]
- [[https://github.com/stretchr/testify][Testify]]
- [[https://github.com/onsi/ginkgo][Ginkgo]]
- [[https://github.com/smartystreets/goconvey][GoConvey]]

* 5º Ejercicio

	Agregar un test, un benchmark y un example al ejercicio de suma de un valor parametrizado p 
	entre 0 <= v <= p. 

	*1º Ejercicio del curso.