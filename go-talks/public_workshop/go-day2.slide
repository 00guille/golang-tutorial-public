Golang workshop - Day 2

Buenos Aires
Junio 2017

Gustavo Rodriguez
Mariano Labariñas

* WIFI

Redes disponibles -> visitas y guess

User: Meli
Pass: Meli.2017

* Punteros

.play ../resources/src/06_pointers/main.go

* Jugando con punteros 1

.play ../resources/src/06_pointers/1/main.go

* Jugando con punteros 2

.play ../resources/src/06_pointers/2/main.go

* Jugando con punteros 3

.play ../resources/src/06_pointers/3/main.go

* Jugando con punteros 4

.play ../resources/src/06_pointers/4/main.go

* Jugando con punteros 5

.play ../resources/src/06_pointers/5/main.go

* Tipo de datos

.code ../resources/src/07_types/main.go /START OMIT/,/END OMIT/

* Tipo de datos - continuación

.play ../resources/src/07_types/main.go /^func main/,/^}/

* Structs - inicialización

	type Vertex struct {
		X, Y int
	}

	var (
		v1 = Vertex{1, 2}  // has type Vertex
		v2 = Vertex{X: 1}  // Y:0 is implicit
		v3 = Vertex{}      // X:0 and Y:0
		p  = &Vertex{1, 2} // has type *Vertex
	)

* Structs 

	type tree struct {
		value       int
		left, right *tree
	}

	func add(t *tree, value int) *tree {
		if t == nil {
			// Equivalent to return &tree{value: value}.
			t = new(tree)
			t.value = value
			return t
		}
		if value < t.value {
			t.left = add(t.left, value)
		} else {
			t.right = add(t.right, value)
		}
		return t
	}

* Collections #1

Array Loop

.play ../resources/src/09_collections/1/main.go


* Collections #2

Slices

	months := [...]string{1: "January", /* ... */, 12: "December"}
	Q2 := months[4:7]                                      summer := months[6:9]
	fmt.Println(Q2)     // ["April" "May" "June"]          fmt.Println(summer) // ["June" "July" "August"]”

.image ../resources/slices.png _ _


* Collections #2

Slice Loop

.play ../resources/src/09_collections/2/main.go

* Collections #3

Map Loop

.play ../resources/src/09_collections/3/main.go

* 2º Ejercicio (struct, punteros, slices)

Hacer un programa que reciba por parametro una lista de enteros, los almacene en un slice, popule un arbol binario y despues imprima los valores en orden ascendente

* Funciones como valores

.play ../resources/src/10_functions_as_values/main.go

* Creando tipos -> &, new y make 

_make_: función built-in que se usa únicamente para allocar e inicializar slices, maps o channels. Se pasa el tipo, el tamaño y la capacidad. Como resultado obtenemos la variable en si, no un puntero

	slice := make([]int, 0, 10)

_new_: función built-in que se usa para allocar memoria, retorna un puntero al valor allocado con zero value

	someVar := new(int)

_&_: al igual que el new se utiliza para allocar memoria y retorna un puntero pero ademas nos permite inicializar atributos en variables complejas: 

	type Dog struct {
		Name string
		Age  int
	}

	d := &Dog{Name: "Tom", Age: 14}

* Gorutines

.play ../resources/src/14_gorutines/main.go

* Defer

.play ../resources/src/13_defer/main.go

* Recover

.play ../resources/src/16_recover/main.go /START OMIT/,/END OMIT/


* Interfaces

.play ../resources/src/11_interfaces/1/main.go

* Interfaces continuación

	type Flash struct {
		Alias string
		Age   int
	}

	func (s *Flash) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "speed")
	}

* Interfaces continuación

.play ../resources/src/11_interfaces/2/main.go /^func main/,/^}/

* Composition

	type SuperHero interface {
		Powers()
	}

	type Superman struct {
		Alias string
		Age   int
	}

	func (s *Superman) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "invulnerability, heat vision, flight, speed")
	}

	type SuperBoy struct {
		Superman
	}

* Composition continuación

.play ../resources/src/15_composition/1/main.go /^func main/,/^}/

* Composition continuación

	type SuperBoy struct {
	    Superman
	}

	func (s *SuperBoy) Powers() string {
	    return fmt.Sprintf("powers: %s", "flight")
	}
    
.play ../resources/src/15_composition/2/main.go /^func main/,/^}/

* Ejercicio

Modelar la funcionalidad para un sistema de cines que calcule los ingresos netos de una función en base a los asistentes y al precio base de la entrada. Existen tres tipos de asistentes y tienen las siguientes características:

- Normales: Pagan el 100%
- Jubilados: Tienen un 50% de descuento
- Invitados: No pagan nada

* Errors

.play ../resources/src/12_errors/main.go