Evolución del GC en Golang

Córdoba
Junio 2017

Gustavo Rodriguez

* ¿Quienes soy?

.image ./resources/gustavo.png _ _

* Motivación de la charla

- go 1.8 release notes

.image ./resources/go1.8_gc_release_note.png _ _

- go 1.7.3 a 1.8.1

.image ./resources/gc_pauses.jpg _ _

* Que es el GC?

.image ./resources/garbage_1.png _ _

- Un programa durante su ejecución crea objetos y cambia punteos
- Se producen objetos inaccesibles ("garbage")
- GC se encarga de liberar estos objetos inaccesibles

* Algoritmo mas simple de GC (Mark and sweep)

.image ./resources/garbage_2.png _ _

- *Pausa* *el* *proceso*
- Marca todos los objetos accesibles y libera el resto 
- Despausa el proceso

* Algoritmo mas simple de GC (Mark and sweep)

.image ./resources/garbage_3.png _ _

- Pausa el proceso 
- *Marca* *todos* *los* *objetos* *accesibles* *y* *libera* *el* *resto*
- Despausa el proceso

* Algoritmo mas simple de GC (Mark and sweep)

.image ./resources/garbage_4.png _ _

- Pausa el proceso 
- Marca todos los objetos accesibles y libera el resto 
- *Despausa* *el* *proceso*

* Algoritmo mas simple de GC (Mark and sweep)

- Es muy simple (+)
- Pausa el proceso (-)
- Recorre todo el heap (-)
- Deja el heap fragmentado (-)

* Visión de go con respecto al GC 

[[https://www.youtube.com/watch?v=aiv1JOfMjm0][Rick Hudson en gopher conf 2015]] 

.image ./resources/evolution.png _ _

- Ley de Moore no se aplica a frecuencia: mas transistores significa mas cores
- Objetivo a cumplir: Minimizar latencia de GC

* Solución propuesta

Intercambiar throughput por mejora en latencia

.image ./resources/latency.jpg _ _

¿Como?

- Eliminando pausas del GC ( se corre el algoritmo en paralelo al proceso )

* Algoritmo Tricolor

.image ./resources/garbage_5.png _ _

- *Se* *recorre* *el* *heap* *en* *capas,* *nodos* *alcanzables* *desde* *proceso* *son* *grises*
- Se toma nodo gris y se marcan sus hijos como gris, luego se marca como negro
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_6.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- *Se* *toma* *nodo* *gris* *y* *se* *marcan* *sus* *hijos* *como* *gris*, *luego* *se* *marca* *como* *negro*
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_7.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- *Se* *toma* *nodo* *gris* *y* *se* *marcan* *sus* *hijos* *como* *gris*, *luego* *se* *marca* *como* *negro*
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_8.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- *Se* *toma* *nodo* *gris* *y* *se* *marcan* *sus* *hijos* *como* *gris*, *luego* *se* *marca* *como* *negro*
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_9.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- *Se* *toma* *nodo* *gris* *y* *se* *marcan* *sus* *hijos* *como* *gris*, *luego* *se* *marca* *como* *negro*
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_10.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- *Se* *toma* *nodo* *gris* *y* *se* *marcan* *sus* *hijos* *como* *gris*, *luego* *se* *marca* *como* *negro*
- Cuando no quedan nodos en gris se elimina el resto

* Algoritmo Tricolor

.image ./resources/garbage_11.png _ _

- Se recorre el heap en capas, nodos alcanzables desde proceso son grises
- Se toma nodo gris y se marcan sus hijos como gris, luego se marca como negro
- *Cuando* *no* *quedan* *nodos* *en* *gris* *se* *elimina* *el* *resto*

* Algoritmo Tricolor - Problemas :(

.image ./resources/garbage_12.png _ _

- Un nodo del grupo negro ahora apunta al blanco
- El proceso apunta a nuevo nodo
- Los punteros pueden cambiar en paralelo con el GC!

* Algoritmo Tricolor - Soluciones :) - Nuevos objetos

.image ./resources/garbage_15.png _ _

- No se puede poner en el grupo blanco
- No se puede poner en el grupo negro
- Va en el grupo gris!

* Algoritmo Tricolor - Soluciones :) - Cambio de punteros

.image ./resources/garbage_16.png _ _

¿Que se debe hacer?

* Algoritmo Tricolor - Soluciones :) - Cambio de punteros

.image ./resources/garbage_17.png _ _

Tambien va al grupo gris

* Resúmen de GC en Go > 1.5

.image ./resources/garbage_res.png _ _

* Comparación de STW en go 1.3, 1.4 y 1.5

.image ./resources/go_1_5_garbage.png _ _

* Foco STW go 1.5

.image ./resources/go_1_5_garbage_2.png _ _

* Evolución del GC desde go 1.5

Go 1.5

.image ./resources/go_1_5_release.png _ _

Go 1.6

.image ./resources/go_1_6_release.png _ _

* Evolución del GC desde go 1.5

Go 1.7

.image ./resources/go_1_7_release.png _ _

Go 1.8

.image ./resources/go_1_8_release.png _ _

[[https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md][Eliminate STW stack re-scanning - Austin Clements, Rick Hudson]]

* Caso de uso de PUSHER

- Sistema de mensajeria real time
- GC de Haskell se convirtió en cuello de botella por el que evaluaron alternativas y fueron a go 1.8
- Post sobre evaluación de alternativas dio pie al proyecto [[https://gitlab.com/gasche/gc-latency-experiment][gc-latency-experiment]] 
- Charla interesante: [[https://gitlab.com/gasche/gc-latency-experiment][Jim Fisher and Will Sewell : Golang's Realtime GC ]] 


* Proyecto gc-latency-experiment

- [[https://gitlab.com/gasche/gc-latency-experiment][Gabriel Scherer: gc-latency-experiment]] 
- Benchmark que escribe repetidamente items en un buffer circular 
.image ./resources/gc_comp.png _ _
- OCaml usa heap generacional que se adapta muy bien a estas pruebas
- La gente de PUSHER menciona que hay dos issues reportados (uno fixeado) que deberian bajar la pausa de go 1.8

* Conclusiones

- Tener en cuenta GC a la hora de elegir un lenguaje
- Algoritmos de GC tienen tradeoffs
- Golang busca ser simple, no da flexibilidad de modificar el GC
- Golang adoptó la politica de minimizar latencia sacrificando un poco de throughput

* Contacto

gustavo.rodriguez@mercadolibre.com

